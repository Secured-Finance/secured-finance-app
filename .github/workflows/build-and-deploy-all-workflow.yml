name: Build Web App and Storybook

on:
  push:
    branches:
      - main
      - develop
      - SF-227
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened

jobs:
  build-and-test-all:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci
        env:
          NPM_AUTH_TOKEN: ${{ secrets.PAT }}
      - run: |
          cat <<EOF > .env.local
          NEXT_PUBLIC_ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}
          NEXT_PUBLIC_AMPLITUDE_API_KEY=${{ secrets.AMPLITUDE_API_KEY }}
          EOF
          if [ ${{ steps.extract_branch.outputs.branch }} = main ]; then
            echo "SF_ENV=staging" >> .env.local
          fi

      - name: Check Syntax with Prettier
        run: npm run prettier:check

      - name: Check Style with ESLint
        run: npm run lint:check

      - name: Run Tests
        run: npm run test:cov

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit-tests
          files: './coverage/coverage-final.json'

      - name: Build Web App
        run: npm run build

      - name: Build Storybook
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

      - name: Publish Web App
        uses: actions/upload-artifact@v3
        with:
          name: WebApp
          path: build
          retention-days: 10
          if-no-files-found: error

  cypress-run:
    name: Cypress Run Tests
    runs-on: ubuntu-latest
    needs: build-and-test-all
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Download the build folders of the WebApp
        uses: actions/download-artifact@v3
        with:
          name: WebApp
          path: build

      - name: Install Dependencies for serving the Web App to Cypress
        run: npm install serve

      - name: Cypress run
        uses: cypress-io/github-action@v3
        with:
          install: false
          start: npx serve ./build
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 180
        env:
          CYPRESS_TENDERLY_KEY: ${{ secrets.TENDERLY_KEY }}

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 3

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 3

  deploy-on-fleek:
    runs-on: ubuntu-latest
    name: Deploy on Fleek only for push on main or develop
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/SF-227') }}
    needs: build-and-test-all
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Set env for development environment
        if : ${{ steps.extract_branch.outputs.branch == 'develop' }}
        run: |
          echo "ENV=dev" >> $GITHUB_ENV

      - name: Set env for staging environment
        if : ${{ steps.extract_branch.outputs.branch == 'SF-227' }}
        run: |
          echo "ENV=stg" >> $GITHUB_ENV

      - name: Retrieve artifact
        uses: actions/download-artifact@v3
        with:
          name: WebApp
          path: .deploy/$ENV

      - name: Deploy the WebApp on IPFS
        id: deploy
        uses: fleekhq/action-deploy@v1
        with:
          apiKey: ${{ secrets.FLEEK_API_KEY }}
          workDir: .deploy/$ENV/
      - name: Get the output url
        run: echo "Deploy url is ${{ steps.deploy.outputs.deployUrl }}"
